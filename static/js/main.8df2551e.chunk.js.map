{"version":3,"sources":["services/operation.ts","components/Answer.tsx","components/Part.tsx","components/Question.tsx","components/PreviousAnswer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Operator","useStyles","makeStyles","theme","textfield","margin","Answer","giveAnswer","classes","useState","answer","setAnswer","onSubmit","e","preventDefault","container","alignItems","spacing","item","xs","className","type","onChange","parseInt","currentTarget","value","NaN","variant","color","operatorToString","op","Plus","Minus","Obelus","Times","BinaryOperation","x","y","operator","this","Part","props","root","fontFamily","textAlign","Question","operation","correct","backgroundColor","wrong","PreviousAnswer","colorClass","output","flexGrow","padding","question","randomNumberInRange","from","to","Math","round","random","randomOperation","AnsweredOperation","Boolean","window","location","hostname","match","ReactDOM","render","setOperation","answers","setAnswers","position","map","i","key","justify","lg","sm","push","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2IAAYA,E,+LCMNC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,UAAW,CACP,kDAAmD,CAC/C,qBAAsB,OACtBC,OAAQ,QA6CLC,EApCA,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,WACRC,EAAUP,IADsB,EAEVQ,mBAAsB,IAFZ,mBAE/BC,EAF+B,KAEvBC,EAFuB,KAgBtC,OACI,0BAAMC,SARO,SAACC,GACVH,GACAH,EAAWG,GAEfC,EAAU,IACVE,EAAEC,mBAIF,kBAAC,IAAD,CAAMC,WAAS,EAACC,WAAW,SAASC,QAAS,GACzC,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GACX,kBAAC,IAAD,CACIC,UAAWZ,EAAQJ,UACnBiB,KAAK,SAASC,SAnBd,SAACT,GACb,IAAMH,EAASa,SAASV,EAAEW,cAAcC,OACzBC,MAAXhB,GACAC,EAAUD,IAiBFiB,QAAQ,WACRF,MAAOf,KAEf,kBAAC,IAAD,CAAMQ,MAAI,EAACC,GAAI,GACX,kBAAC,IAAD,CAAQE,KAAK,SAASM,QAAQ,YAAYC,MAAM,WAAhD,U,QDvCT,SAASC,EAAiBC,GAC7B,OAAQA,GACJ,KAAK9B,EAAS+B,KACV,MAAO,IACX,KAAK/B,EAASgC,MACV,MAAO,SACX,KAAKhC,EAASiC,OACV,MAAO,OACX,KAAKjC,EAASkC,MACV,MAAO,S,SAhBPlC,O,eAAAA,I,iBAAAA,I,mBAAAA,I,kBAAAA,M,KA4BL,IAAMmC,EAAb,WAEI,WACaC,EACAC,EACAC,GACV,yBAHUF,IAGX,KAFWC,IAEX,KADWC,WALjB,qDASQ,OAAQC,KAAKD,UACT,KAAKtC,EAAS+B,KACV,OAAOQ,KAAKH,EAAIG,KAAKF,EACzB,KAAKrC,EAASgC,MACV,OAAOO,KAAKH,EAAIG,KAAKF,EACzB,KAAKrC,EAASkC,MACV,OAAOK,KAAKH,EAAIG,KAAKF,EACzB,KAAKrC,EAASiC,OACV,OAAOM,KAAKH,EAAIG,KAAKF,OAjBrC,KEjBeG,EANF,SAACC,GACV,OACI,kBAAC,IAAD,CAAYd,QAAQ,MAAMc,EAAMhB,QCDlCxB,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCuC,KAAM,CACFC,WAAY,YACZC,UAAW,cAQNC,EAAW,SAACJ,GACrB,IAAMjC,EAAUP,IACR6C,EAAcL,EAAdK,UACR,OACI,kBAAC,IAAD,CAAM/B,WAAS,EAACK,UAAWZ,EAAQkC,MAC/B,kBAAC,IAAD,CAAMxB,MAAI,EAACC,GAAI,GACX,kBAAC,EAAD,CAAMM,MAAOqB,EAAUV,KAE3B,kBAAC,IAAD,CAAMlB,MAAI,EAACC,GAAI,GACX,kBAAC,EAAD,CAAMM,MAAOI,EAAiBiB,EAAUR,aAE5C,kBAAC,IAAD,CAAMpB,MAAI,EAACC,GAAI,GACX,kBAAC,EAAD,CAAMM,MAAOqB,EAAUT,KAE3B,kBAAC,IAAD,CAAMnB,MAAI,EAACC,GAAI,GACX,kBAAC,EAAD,CAAMM,MAAM,SCzBtBxB,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCuC,KAAM,CACFC,WAAY,YACZC,UAAW,UAEfG,QAAS,CACLC,gBAAiB,SAErBC,MAAO,CACHD,gBAAiB,WASZE,EAAiB,SAACT,GAC3B,IAAMjC,EAAUP,IACR6C,EAAsBL,EAAtBK,UAAWpC,EAAW+B,EAAX/B,OACbyC,EAAaL,EAAUM,WAAa1C,EAASF,EAAQuC,QAAUvC,EAAQyC,MAC7E,OACI,kBAAC,IAAD,CAAMlC,WAAS,EAACK,UAAWZ,EAAQkC,MAC/B,kBAAC,IAAD,CAAMxB,MAAI,EAACC,GAAI,GACX,kBAAC,EAAD,CAAU2B,UAAWA,KAEzB,kBAAC,IAAD,CAAM5B,MAAI,EAACE,UAAW+B,EAAYhC,GAAI,GAClC,kBAAC,EAAD,CAAMM,MAAOf,OCtBvBT,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCuC,KAAM,CACJW,SAAU,EACVC,QAASnD,EAAMc,QAAQ,IAEzBsC,SAAU,CACRD,QAASnD,EAAMc,QAAQ,IAEzBP,OAAQ,CACNiC,WAAY,YACZC,UAAW,cAIf,SAASY,EAAoBC,EAAcC,GACzC,GAAID,EAAOC,EAAI,CAAC,IAAD,EACA,CAACA,EAAID,GAAjBA,EADY,KACNC,EADM,KAGf,OAAOD,EAAOE,KAAKC,MAAMD,KAAKE,UAAYH,EAAKD,IAGjD,SAASK,IACP,IACMxB,EADY,CAACtC,EAAS+B,KAAM/B,EAASgC,MAAOhC,EAASiC,OAAQjC,EAASkC,OACjDsB,EAAoB,EAAG,IAC5CpB,EAAIoB,EAAoB,EAAG,IAC3BnB,EAAImB,EAAoB,EAAG,IACjC,OAAO,IAAIrB,EAAgBC,EAAGC,EAAGC,G,IAG7ByB,EACJ,WAAqBjB,EAA+BpC,GAAiB,yBAAhDoC,YAA+C,KAAhBpC,UC/BlCsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBFwCD,WACb,IAAM9D,EAAUP,IADY,EAEMQ,mBAASqD,KAFf,mBAErBhB,EAFqB,KAEVyB,EAFU,OAGE9D,mBAAS,IAHX,mBAGrB+D,EAHqB,KAGZC,EAHY,KAS5B,OACE,oCACE,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAQC,SAAS,YACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAY/C,QAAQ,KAAKC,MAAM,WAA/B,wBAKJ,8BACE,kBAAC,IAAD,CAAMb,WAAS,EAACK,UAAWZ,EAAQkC,KAAMzB,QAAS,GAC/CuD,EAAQG,KAAI,SAACjE,EAAQkE,GAAT,OACX,kBAAC,IAAD,CAAM1D,MAAI,EAAC2D,IAAKD,EAAGxD,UAAWZ,EAAQE,OAAQS,GAAI,GAChD,kBAAC,EAAD,CAAgB2B,UAAWpC,EAAOoC,UAAWpC,OAAQA,EAAOA,aAIhE,kBAAC,IAAD,CAAMQ,MAAI,EAACC,GAAI,IACb,kBAAC,IAAD,CAAMJ,WAAS,EAAC+D,QAAQ,UACtB,kBAAC,IAAD,CAAM5D,MAAI,EAAC2D,IAAI,WAAWzD,UAAWZ,EAAQ+C,SAAUwB,GAAI,EAAGC,GAAI,EAAG7D,GAAI,IACvE,kBAAC,IAAD,CAAMJ,WAAS,EAACC,WAAW,SAASC,QAAS,GAC3C,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GACb,kBAAC,EAAD,CAAU2B,UAAWA,KAEvB,kBAAC,IAAD,CAAM5B,MAAI,EAACC,GAAI,GACb,kBAAC,EAAD,CAAQZ,WA/BP,SAACG,GAClB8D,EAAQS,KAAK,IAAIlB,EAAkBjB,EAAWpC,IAC9C+D,EAAWD,GACXD,EAAaT,kBE/CD,MAASoB,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.8df2551e.chunk.js","sourcesContent":["export enum Operator {\n    Plus,\n    Minus,\n    Obelus,\n    Times,\n}\n\nexport function operatorToString(op: Operator): string {\n    switch (op) {\n        case Operator.Plus:\n            return \"+\";\n        case Operator.Minus:\n            return \"−\";\n        case Operator.Obelus:\n            return \"÷\";\n        case Operator.Times:\n            return \"×\";\n    }\n}\n\nexport interface Operation extends Readonly<{\n    x: number\n    y: number\n    operator: Operator\n}> {\n    output(): number\n}\n\nexport class BinaryOperation implements Operation {\n\n    constructor(\n        readonly x: number,\n        readonly y: number,\n        readonly operator: Operator\n    ) { }\n\n    output(): number {\n        switch (this.operator) {\n            case Operator.Plus:\n                return this.x + this.y;\n            case Operator.Minus:\n                return this.x - this.y;\n            case Operator.Times:\n                return this.x * this.y;\n            case Operator.Obelus:\n                return this.x / this.y;\n        }\n    }\n}\n","import Button from '@material-ui/core/Button/Button';\nimport Grid from '@material-ui/core/Grid/Grid';\nimport TextField from '@material-ui/core/TextField/TextField';\nimport React, { ChangeEvent, useState, FormEvent } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n    textfield: {\n        '& input[type=number]::-webkit-inner-spin-button': {\n            '-webkit-appearance': 'none',\n            margin: 0,\n        },\n    },\n}));\n\ninterface Props {\n    giveAnswer(answer: number): void\n}\n\nconst Answer = ({ giveAnswer }: Props) => {\n    const classes = useStyles();\n    const [answer, setAnswer] = useState<number | ''>('');\n    const onInput = (e: ChangeEvent<HTMLInputElement>) => {\n        const answer = parseInt(e.currentTarget.value);\n        if (answer !== NaN) {\n            setAnswer(answer);\n        }\n    }\n    const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n        if (answer) {\n            giveAnswer(answer);\n        }\n        setAnswer('');\n        e.preventDefault();\n    }\n    return (\n        <form onSubmit={onSubmit}>\n        <Grid container alignItems=\"center\" spacing={2}>\n            <Grid item xs={6}>\n                <TextField\n                    className={classes.textfield}\n                    type=\"number\" onChange={onInput}\n                    variant=\"outlined\"\n                    value={answer} />\n            </Grid>\n            <Grid item xs={6}>\n                <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n                    OK\n                </Button>\n            </Grid>\n        </Grid>\n        </form>\n    )\n}\n\nexport default Answer;\n","import React from 'react';\nimport Typography from \"@material-ui/core/Typography/Typography\"\n\ninterface Props extends Readonly<{ value: number | string }> {}\n\nconst Part = (props: Props) => {\n    return (\n        <Typography variant=\"h4\">{props.value}</Typography>\n    )\n}\n\nexport default Part;\n","import Grid from '@material-ui/core/Grid/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\nimport { Operation, operatorToString } from '../services/operation';\nimport Part from './Part';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        fontFamily: 'Monospace',\n        textAlign: 'center',\n    },\n}));\n\ninterface Props extends Readonly<{\n    operation: Operation\n}> { }\n\nexport const Question = (props: Props) => {\n    const classes = useStyles();\n    const { operation } = props;\n    return (\n        <Grid container className={classes.root}>\n            <Grid item xs={4}>\n                <Part value={operation.x} />\n            </Grid>\n            <Grid item xs={2}>\n                <Part value={operatorToString(operation.operator)} />\n            </Grid>\n            <Grid item xs={4}>\n                <Part value={operation.y} />\n            </Grid>\n            <Grid item xs={2}>\n                <Part value=\"=\" />\n            </Grid>\n        </Grid>\n    );\n}\n","import Grid from '@material-ui/core/Grid/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\nimport { Operation } from '../services/operation';\nimport { Question } from './Question';\nimport Part from './Part';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        fontFamily: 'Monospace',\n        textAlign: 'center',\n    },\n    correct: {\n        backgroundColor: 'green',\n    },\n    wrong: {\n        backgroundColor: 'red',\n    },\n}));\n\ninterface Props extends Readonly<{\n    operation: Operation\n    answer: number\n}> { }\n\nexport const PreviousAnswer = (props: Props) => {\n    const classes = useStyles();\n    const { operation, answer } = props;\n    const colorClass = operation.output() === answer ? classes.correct : classes.wrong;\n    return (\n        <Grid container className={classes.root}>\n            <Grid item xs={8}>\n                <Question operation={operation} />\n            </Grid>\n            <Grid item className={colorClass} xs={4}>\n                <Part value={answer} />\n            </Grid>\n        </Grid>\n    );\n}\n","import AppBar from '@material-ui/core/AppBar/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline/CssBaseline';\nimport Grid from '@material-ui/core/Grid/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Toolbar from '@material-ui/core/Toolbar/Toolbar';\nimport Typography from '@material-ui/core/Typography/Typography';\nimport React, { useState } from 'react';\nimport './App.css';\nimport Answer from './components/Answer';\nimport { PreviousAnswer } from './components/PreviousAnswer';\nimport { Question } from './components/Question';\nimport { BinaryOperation, Operation, Operator } from './services/operation';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    padding: theme.spacing(1),\n  },\n  question: {\n    padding: theme.spacing(1),\n  },\n  answer: {\n    fontFamily: 'Monospace',\n    textAlign: 'center'\n  }\n}));\n\nfunction randomNumberInRange(from: number, to: number): number {\n  if (from > to) {\n    [from, to] = [to, from];\n  }\n  return from + Math.round(Math.random() * (to - from))\n}\n\nfunction randomOperation(): Operation {\n  const operators = [Operator.Plus, Operator.Minus, Operator.Obelus, Operator.Times];\n  const operator = operators[randomNumberInRange(0, 1)];\n  const x = randomNumberInRange(1, 10);\n  const y = randomNumberInRange(1, 10);\n  return new BinaryOperation(x, y, operator);\n}\n\nclass AnsweredOperation {\n  constructor(readonly operation: Operation, readonly answer: number) { }\n}\n\nexport default function App() {\n  const classes = useStyles();\n  const [operation, setOperation] = useState(randomOperation());\n  const [answers, setAnswers] = useState([] as AnsweredOperation[]);\n  const giveAnswer = (answer: number) => {\n    answers.push(new AnsweredOperation(operation, answer));\n    setAnswers(answers);\n    setOperation(randomOperation());\n  }\n  return (\n    <>\n      <CssBaseline />\n      <AppBar position=\"relative\">\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\">\n            Complémentaires\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <main>\n        <Grid container className={classes.root} spacing={2}>\n          {answers.map((answer, i) => (\n            <Grid item key={i} className={classes.answer} xs={6}>\n              <PreviousAnswer operation={answer.operation} answer={answer.answer} />\n            </Grid>\n          ))}\n\n          <Grid item xs={12}>\n            <Grid container justify=\"center\">\n              <Grid item key=\"question\" className={classes.question} lg={4} sm={6} xs={12}>\n                <Grid container alignItems=\"center\" spacing={2}>\n                  <Grid item xs={7}>\n                    <Question operation={operation} />\n                  </Grid>\n                  <Grid item xs={5}>\n                    <Answer giveAnswer={giveAnswer} />\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </main>\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}