{"version":3,"sources":["services/operation.ts","components/Operation.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Operator","useStyles","makeStyles","theme","card","fontFamily","textAlign","correct","backgroundColor","wrong","OperationCard","props","classes","operation","answer","colorClass","output","className","variant","toString","BinaryOperation","x","y","operator","this","op","Plus","Minus","Obelus","Times","operatorToString","grid","flexGrow","paper","height","width","randomNumberInRange","from","to","Math","round","random","randomOperation","Boolean","window","location","hostname","match","ReactDOM","render","recognition","webkitSpeechRecognition","useEffect","lang","continuous","interimResults","onresult","event","stop","position","color","container","justify","xs","i","push","repeat","map","v","item","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.09392399.chunk.js","sourcesContent":["export enum Operator {\n    Plus,\n    Minus,\n    Obelus,\n    Times,\n}\n\nexport function operatorToString(op: Operator): string {\n    switch (op) {\n        case Operator.Plus:\n            return \"+\";\n        case Operator.Minus:\n            return \"−\";\n        case Operator.Obelus:\n            return \"÷\";\n        case Operator.Times:\n            return \"×\";\n    }\n}\n\nexport interface Operation {\n    output(): number\n}\n\nexport class BinaryOperation implements Operation {\n\n    constructor(\n        readonly x: number,\n        readonly y: number,\n        readonly operator: Operator\n    ) { }\n\n    toString(): string {\n        return `${this.x} ${operatorToString(this.operator)} ${this.y}`\n    }\n\n    output(): number {\n        switch (this.operator) {\n            case Operator.Plus:\n                return this.x + this.y;\n            case Operator.Minus:\n                return this.x - this.y;\n            case Operator.Times:\n                return this.x * this.y;\n            case Operator.Obelus:\n                return this.x / this.y;\n        }\n    }\n}\n","import Box from '@material-ui/core/Box/Box';\nimport Card from '@material-ui/core/Card/Card';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography/Typography';\nimport React from 'react';\nimport { Operation } from '../services/operation';\n\nconst useStyles = makeStyles(theme => ({\n    card: {\n        fontFamily: 'Monospace',\n        textAlign: 'center',\n    },\n    correct: {\n        backgroundColor: 'green',\n    },\n    wrong: {\n        backgroundColor: 'red',\n    },\n}));\n\ninterface Props extends Readonly<{\n    operation: Operation\n    answer: number\n}> { }\n\nexport const OperationCard = (props: Props) => {\n    const classes = useStyles();\n    const { operation, answer } = props;\n    const colorClass = operation.output() === answer ? classes.correct : classes.wrong;\n    return (\n        <Card className={classes.card}>\n            <Typography className={colorClass} variant=\"h2\">\n                {operation.toString()} = {answer}\n            </Typography>\n        </Card>\n    );\n}\n","import AppBar from '@material-ui/core/AppBar/AppBar';\nimport Grid from '@material-ui/core/Grid/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Toolbar from '@material-ui/core/Toolbar/Toolbar';\nimport Typography from '@material-ui/core/Typography/Typography';\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport CssBaseline from '@material-ui/core/CssBaseline/CssBaseline';\nimport { OperationCard } from './components/Operation';\nimport { Operation, Operator, BinaryOperation } from './services/operation';\n\nconst useStyles = makeStyles(theme => ({\n  grid: {\n    flexGrow: 1,\n  },\n  paper: {\n    height: 140,\n    width: 100,\n  },\n}));\n\nfunction randomNumberInRange(from: number, to: number): number {\n  if (from > to) {\n    [from, to] = [to, from];\n  } \n  return from + Math.round(Math.random() * (to - from))\n}\n\nfunction randomOperation(): Operation {\n  const operators = [Operator.Plus, Operator.Minus, Operator.Obelus, Operator.Times];\n  const operator = operators[randomNumberInRange(0, 1)];\n  const x = randomNumberInRange(1, 10);\n  const y = randomNumberInRange(1, 10);\n  return new BinaryOperation(x, y, operator);\n}\n\nfunction repeat(x: number): number[] {\n  const xs = [];\n  for (let i = 0; i < x; i++) {\n    xs.push(0);\n  }\n  return xs;\n}\n\nexport default function App() {\n  const classes = useStyles();\n  const recognition: SpeechRecognition = new (window as any).webkitSpeechRecognition();\n  useEffect(() => {\n    recognition.lang = 'fr-CA';\n    recognition.continuous = true;\n    recognition.interimResults = false;\n    recognition.onresult = (event) => {\n      // setAnswer(event.results[event.resultIndex][0].transcript);\n    }\n    // recognition.start();\n    return () => {\n      recognition.stop();\n    }\n  }, [])\n  return (\n    <>\n      <CssBaseline />\n      <AppBar position=\"relative\">\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\">\n            Complémentaires\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <main>\n        <Grid container className={classes.grid} justify=\"center\">\n          {repeat(20).map(v => (\n            <Grid item xs={12}>\n              <OperationCard operation={randomOperation()} answer={1} />\n            </Grid>\n          ))}\n        </Grid>\n      </main>\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}