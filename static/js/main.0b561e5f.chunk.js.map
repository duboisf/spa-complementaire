{"version":3,"sources":["lib/operation.ts","components/Answer.tsx","components/Expression.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Operator","useStyles","makeStyles","theme","form","fontFamily","boxSizing","breakpoints","up","maxWidth","textfield","fontSize","WebkitAppearance","margin","Answer","giveAnswer","classes","useState","answer","setAnswer","className","onSubmit","e","preventDefault","type","onChange","parseInt","currentTarget","value","isNaN","placeholder","labelWidth","randNumInRange","to","Math","round","random","pickOne","as","length","randOp","operators","min","max","operator","x","y","BinaryOperation","opToString","op","Plus","Minus","Obelus","Times","this","useExpressionStyle","root","lineHeight","box3ch","width","textAlign","borderRadius","correct","backgroundColor","incorrect","Expression","props","isCorrect","operation","output","cls","answerBackground","container","style","height","justify","alignItems","alignContent","wrap","item","undefined","xs","flexGrow","appBar","color","palette","primary","contrastText","main","previousAnswer","hidden","visibility","question","spacing","stats","paddingLeft","fillerOperation","PlusMinus","Boolean","window","location","hostname","match","ReactDOM","render","setOperation","Array","fill","map","answers","setAnswers","correctCount","setCorrectCount","position","variant","Paper","answeredOp","i","key","padding","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b561e5f.chunk.js","sourcesContent":["export enum Operator {\n  Plus,\n  Minus,\n  Obelus,\n  Times,\n}\n\nexport function randNumInRange(to: number): number {\n  return Math.round(Math.random() * to)\n}\n\nconst pickOne = <A>(as: A[]) => as[randNumInRange(as.length - 1)];\n\nexport function randOp(operators: Operator[], min: number, max: number): Operation {\n  const operator = pickOne(operators);\n  const x = randNumInRange(max - min) + min;\n  const y = randNumInRange(max - min) + min;\n  return new BinaryOperation(x, y, operator);\n}\n\nexport function opToString(op: Operator): string {\n  switch (op) {\n    case Operator.Plus:\n      return \"+\";\n    case Operator.Minus:\n      return \"−\";\n    case Operator.Obelus:\n      return \"÷\";\n    case Operator.Times:\n      return \"×\";\n  }\n}\n\nexport interface Operation extends Readonly<{\n  x: number\n  y: number\n  operator: Operator\n}> {\n  output(): number\n}\n\nexport class BinaryOperation implements Operation {\n\n  constructor(\n    readonly x: number,\n    readonly y: number,\n    readonly operator: Operator\n  ) { }\n\n  output(): number {\n    switch (this.operator) {\n      case Operator.Plus:\n        return this.x + this.y;\n      case Operator.Minus:\n        return this.x - this.y;\n      case Operator.Times:\n        return this.x * this.y;\n      case Operator.Obelus:\n        return this.x / this.y;\n    }\n  }\n\n  toString(): string {\n    return `${this.x} ${opToString(this.operator)} ${this.y}`;\n  }\n}\n","import OutlinedInput from '@material-ui/core/OutlinedInput/OutlinedInput';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React, { ChangeEvent, FormEvent, useState } from 'react';\n\nconst useStyles = makeStyles(theme => ({\n  form: {\n    fontFamily: 'monospace',\n    boxSizing: 'border-box',\n    [theme.breakpoints.up('xs')]: {\n      maxWidth: '4rem',\n    },\n    [theme.breakpoints.up('sm')]: {\n      maxWidth: '7rem',\n    },\n    [theme.breakpoints.up('lg')]: {\n      maxWidth: '12rem',\n    },\n  },\n  textfield: {\n    fontFamily: `'Roboto Mono', monospace`,\n    [theme.breakpoints.up('xs')]: {\n      fontSize: '1rem',\n    },\n    [theme.breakpoints.up('sm')]: {\n      fontSize: '2rem',\n    },\n    [theme.breakpoints.up('lg')]: {\n      fontSize: '3rem',\n    },\n    '& input[type=number]::-webkit-inner-spin-button': {\n      WebkitAppearance: 'none',\n      margin: 0,\n    },\n  },\n}));\n\ninterface Props {\n  giveAnswer(answer: number): void\n}\n\nconst Answer = ({ giveAnswer }: Props) => {\n  const classes = useStyles();\n  const [answer, setAnswer] = useState<number | ''>('');\n  const onInput = (e: ChangeEvent<HTMLInputElement>) => {\n    const answer = parseInt(e.currentTarget.value);\n    setAnswer(isNaN(answer) ? '' : answer);\n  }\n  const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n    if (answer !== '') {\n      giveAnswer(answer);\n    }\n    setAnswer('');\n    e.preventDefault();\n  }\n  return (\n    <form className={classes.form} onSubmit={onSubmit}>\n      <OutlinedInput\n        className={classes.textfield}\n        type=\"number\" onChange={onInput}\n        placeholder=\"???\"\n        labelWidth={0}\n        value={answer} />\n    </form>\n  )\n}\n\nexport default Answer;\n","import Grid from '@material-ui/core/Grid/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\nimport { Operation as Op, opToString } from '../lib/operation';\n\ninterface ExpressionProps extends Readonly<{ operation: Op, answer?: number }> { }\n\nconst useExpressionStyle = makeStyles(theme => ({\n  root: {\n    fontFamily: 'Monospace',\n    lineHeight: 'normal',\n  },\n  box3ch: {\n    width: '3ch',\n    textAlign: 'center',\n  },\n  operator: {\n    textAlign: 'center',\n  },\n  answer: {\n    borderRadius: 4,\n    textAlign: 'center',\n    width: '6ch',\n  },\n  correct: {\n    backgroundColor: 'rgba(0, 255, 0, 0.5)',\n  },\n  incorrect: {\n    backgroundColor: 'rgba(255, 0, 0, 0.5)',\n  },\n}));\n\nexport const Expression = (props: ExpressionProps) => {\n  const isCorrect = props.operation.output() === props.answer;\n  const cls = useExpressionStyle();\n  const answerBackground = isCorrect ? cls.correct : cls.incorrect;\n  const op = props.operation;\n  const operator = opToString(op.operator);\n  return (\n    <Grid container style={{height: '100%'}} justify=\"center\" alignItems=\"center\" alignContent=\"center\" wrap=\"nowrap\">\n      <Grid item className={cls.box3ch}>\n        {op.x}\n      </Grid>\n      <Grid item className={cls.box3ch}>\n        {operator}\n      </Grid>\n      <Grid item className={cls.box3ch}>\n        {op.y}\n      </Grid>\n      <Grid item className={cls.box3ch}>\n        =\n      </Grid>\n       {props.answer !== undefined &&\n         <Grid xs item className={`${cls.answer} ${answerBackground} ${cls.box3ch}`}>\n           {props.answer}\n         </Grid>\n       }\n    </Grid>\n  );\n}\n","import { Paper } from '@material-ui/core';\nimport AppBar from '@material-ui/core/AppBar/AppBar';\nimport Container from '@material-ui/core/Container/Container';\nimport CssBaseline from '@material-ui/core/CssBaseline/CssBaseline';\nimport Grid from '@material-ui/core/Grid/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Toolbar from '@material-ui/core/Toolbar/Toolbar';\nimport Typography from '@material-ui/core/Typography/Typography';\nimport React, { useState } from 'react';\nimport './App.css';\nimport Answer from './components/Answer';\nimport { Expression } from './components/Expression';\nimport { BinaryOperation, Operation, Operator, randOp, randNumInRange } from './lib/operation';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    fontFamily: 'monospace',\n    flexGrow: 1,\n  },\n  appBar: {\n    color: theme.palette.primary.contrastText,\n    backgroundColor: theme.palette.primary.main,\n  },\n  previousAnswer: {\n    textAlign: 'center'\n  },\n  hidden: {\n    visibility: 'hidden',\n  },\n  question: {\n    fontFamily: `'Roboto Mono', monospace`,\n    [theme.breakpoints.up('xs')]: {\n      fontSize: '1rem',\n    },\n    [theme.breakpoints.up('sm')]: {\n      fontSize: '2rem',\n    },\n    [theme.breakpoints.up('lg')]: {\n      fontSize: '3rem',\n    },\n    margin: theme.spacing(2),\n    padding: theme.spacing(2),\n  },\n  stats: {\n    fontSize: '0.7rem',\n    height: '3em',\n    lineHeight: 'normal',\n    paddingLeft: theme.spacing(2),\n  },\n}));\n\ninterface AnsweredOperation extends Readonly<{\n  operation: Operation,\n  answer: number,\n}> { }\n\nconst fillerOperation: AnsweredOperation = {\n  operation: new BinaryOperation(1, 1, Operator.Plus),\n  answer: 1\n}\n\nconst PlusMinus = [Operator.Plus, Operator.Minus];\n\nexport default function App() {\n  const cls = useStyles();\n  const [operation, setOperation] = useState(randOp(PlusMinus, 5, 10));\n  const [maxAnswers, setMaxAnswers] = useState(0);\n  const [answers, setAnswers] = useState(\n    Array(0).fill(1).map(() => ({ operation: randOp(PlusMinus, 5, 10), answer: randNumInRange(10) }))\n  );\n  const [correctCount, setCorrectCount] = useState(0);\n  const giveAnswer = (answer: number) => {\n    const answeredOp = { operation, answer };\n    setAnswers([...answers, answeredOp]);\n    if (operation.output() === answer) {\n      setOperation(randOp(PlusMinus, 5, 10));\n      setCorrectCount(correctCount + 1);\n    }\n  }\n  return (\n    <div className={cls.root}>\n      <CssBaseline />\n      <AppBar className={cls.appBar} position=\"relative\">\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\">\n            Complémentaires\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Container maxWidth=\"xl\">\n        <Grid container>\n          <Grid container item justify=\"center\">\n            <Grid item>\n              <Paper className={cls.question}>\n                <Grid container wrap=\"nowrap\">\n                  <Grid item>\n                    <Grid container justify=\"flex-end\" wrap=\"nowrap\">\n                      <Grid item>\n                        <Expression operation={operation} />\n                      </Grid>\n                      <Grid item>\n                        <Answer giveAnswer={giveAnswer} />\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                  <Grid item className={cls.stats}>\n                    <Grid container item className={cls.stats} alignContent=\"stretch\">\n                        Total: {correctCount}/{answers.length}\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Paper>\n            </Grid>\n          </Grid>\n\n          <Grid container item justify=\"center\" spacing={2}>\n            {answers.map((answer, i) => (\n              <Grid item key={i} className={cls.previousAnswer}>\n                <Paper style={{ padding: 8 }}>\n                  <Expression operation={answer.operation} answer={answer.answer} />\n                </Paper>\n              </Grid>\n            ))}\n            {Array(12).fill(1).map(() => (\n              <Grid item className={cls.hidden}>\n                <Paper style={{ padding: 8 }}>\n                  <Expression operation={fillerOperation.operation} answer={fillerOperation.answer} />\n                </Paper>\n              </Grid>\n            ))}\n          </Grid>\n\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}