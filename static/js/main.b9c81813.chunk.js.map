{"version":3,"sources":["services/operation.ts","components/Answer.tsx","components/Expression.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Operator","useStyles","makeStyles","form","fontFamily","fontSize","boxSizing","width","textfield","WebkitAppearance","margin","Answer","giveAnswer","classes","useState","answer","setAnswer","className","onSubmit","e","preventDefault","type","onChange","parseInt","currentTarget","value","isNaN","placeholder","labelWidth","operatorToString","op","Plus","Minus","Obelus","Times","BinaryOperation","x","y","operator","this","useExpressionStyle","theme","root","box3ch","textAlign","verticalAlign","borderRadius","spacing","paddingLeft","paddingRight","marginRight","correct","backgroundColor","incorrect","Expression","props","isCorrect","operation","output","cls","answerBackground","container","style","height","justify","alignItems","item","undefined","xs","flexGrow","appBar","color","palette","primary","contrastText","main","previousAnswer","question","padding","stats","randNumInRange","from","to","Math","round","random","randomOperation","Boolean","window","location","hostname","match","ReactDOM","render","setOperation","answers","setAnswers","correctCount","setCorrectCount","position","variant","Paper","wrap","answeredOp","alignContent","length","map","i","key","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b9c81813.chunk.js","sourcesContent":["export enum Operator {\n    Plus,\n    Minus,\n    Obelus,\n    Times,\n}\n\nexport function operatorToString(op: Operator): string {\n    switch (op) {\n        case Operator.Plus:\n            return \"+\";\n        case Operator.Minus:\n            return \"−\";\n        case Operator.Obelus:\n            return \"÷\";\n        case Operator.Times:\n            return \"×\";\n    }\n}\n\nexport interface Operation extends Readonly<{\n    x: number\n    y: number\n    operator: Operator\n}> {\n    output(): number\n}\n\nexport class BinaryOperation implements Operation {\n\n    constructor(\n        readonly x: number,\n        readonly y: number,\n        readonly operator: Operator\n    ) { }\n\n    output(): number {\n        switch (this.operator) {\n            case Operator.Plus:\n                return this.x + this.y;\n            case Operator.Minus:\n                return this.x - this.y;\n            case Operator.Times:\n                return this.x * this.y;\n            case Operator.Obelus:\n                return this.x / this.y;\n        }\n    }\n\n    toString(): string {\n        return `${this.x} ${operatorToString(this.operator)} ${this.y}`;\n    }\n}\n","import { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField/TextField';\nimport React, { ChangeEvent, FormEvent, useState } from 'react';\nimport OutlinedInput from '@material-ui/core/OutlinedInput/OutlinedInput';\n\nconst useStyles = makeStyles(() => ({\n  form: {\n    fontFamily: 'monospace',\n    fontSize: '3rem',\n    boxSizing: 'border-box',\n    width: '4ch',\n  },\n  textfield: {\n    fontFamily: 'monospace',\n    fontSize: '3rem',\n    '& input[type=number]::-webkit-inner-spin-button': {\n      WebkitAppearance: 'none',\n      margin: 0,\n    },\n  },\n}));\n\ninterface Props {\n  giveAnswer(answer: number): void\n}\n\nconst Answer = ({ giveAnswer }: Props) => {\n  const classes = useStyles();\n  const [answer, setAnswer] = useState<number | ''>('');\n  const onInput = (e: ChangeEvent<HTMLInputElement>) => {\n    const answer = parseInt(e.currentTarget.value);\n    setAnswer(isNaN(answer) ? '' : answer);\n  }\n  const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n    if (answer !== '') {\n      giveAnswer(answer);\n    }\n    setAnswer('');\n    e.preventDefault();\n  }\n  return (\n    <form className={classes.form} onSubmit={onSubmit}>\n      <OutlinedInput\n        className={classes.textfield}\n        type=\"number\" onChange={onInput}\n        placeholder=\"???\"\n        labelWidth={0}\n        value={answer} />\n    </form>\n  )\n}\n\nexport default Answer;\n","import Box from '@material-ui/core/Box/Box';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\nimport { Operation as Op, operatorToString } from '../services/operation';\nimport Grid from '@material-ui/core/Grid/Grid';\nimport { Container } from '@material-ui/core';\n\ninterface ExpressionProps extends Readonly<{ operation: Op, answer?: number }> { }\n\nconst useExpressionStyle = makeStyles(theme => ({\n  root: {\n    fontFamily: 'Monospace',\n  },\n  box3ch: {\n    width: '3ch',\n    textAlign: 'center',\n    verticalAlign: 'middle'\n  },\n  operator: {\n    textAlign: 'center',\n  },\n  answer: {\n    borderRadius: theme.spacing(1) / 2,\n    paddingLeft: theme.spacing(1),\n    paddingRight: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    textAlign: 'right',\n    width: '6ch',\n  },\n  correct: {\n    backgroundColor: 'rgba(0, 255, 0, 0.5)',\n  },\n  incorrect: {\n    backgroundColor: 'rgba(255, 0, 0, 0.5)',\n  },\n}));\n\nexport const Expression = (props: ExpressionProps) => {\n  const isCorrect = props.operation.output() === props.answer;\n  const cls = useExpressionStyle();\n  const answerBackground = isCorrect ? cls.correct : cls.incorrect;\n  const op = props.operation;\n  const operator = operatorToString(op.operator);\n  return (\n    <Grid container style={{height: '100%'}} justify=\"center\" alignItems=\"center\">\n      <Grid item className={cls.box3ch}>\n        {op.x}\n      </Grid>\n      <Grid item className={cls.box3ch}>\n        {operator}\n      </Grid>\n      <Grid item className={cls.box3ch}>\n        {op.y}\n      </Grid>\n      <Grid item className={cls.box3ch}>\n        =\n      </Grid>\n       {props.answer !== undefined &&\n         <Grid xs item className={`${cls.answer} ${answerBackground} ${cls.box3ch}`}>\n           {props.answer}\n         </Grid>\n       }\n    </Grid>\n  );\n}\n","import { Paper } from '@material-ui/core';\nimport AppBar from '@material-ui/core/AppBar/AppBar';\nimport Container from '@material-ui/core/Container/Container';\nimport CssBaseline from '@material-ui/core/CssBaseline/CssBaseline';\nimport Grid from '@material-ui/core/Grid/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Toolbar from '@material-ui/core/Toolbar/Toolbar';\nimport Typography from '@material-ui/core/Typography/Typography';\nimport React, { useState } from 'react';\nimport './App.css';\nimport Answer from './components/Answer';\nimport { Expression } from './components/Expression';\nimport { BinaryOperation, Operation, Operator } from './services/operation';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    fontFamily: 'monospace',\n    flexGrow: 1,\n  },\n  appBar: {\n    color: theme.palette.primary.contrastText,\n    backgroundColor: theme.palette.primary.main,\n  },\n  previousAnswer: {\n    textAlign: 'center'\n  },\n  question: {\n    fontFamily: 'monospace',\n    fontSize: '3rem',\n    margin: theme.spacing(2),\n    padding: theme.spacing(2),\n  },\n  stats: {\n    fontSize: '0.7rem',\n    height: '100%',\n    paddingLeft: theme.spacing(2),\n  },\n}));\n\nfunction randNumInRange(from: number, to: number): number {\n  if (from > to) {\n    [from, to] = [to, from];\n  }\n  return from + Math.round(Math.random() * (to - from))\n}\n\nfunction randomOperation(): Operation {\n  const operators = [Operator.Plus, Operator.Minus, Operator.Obelus, Operator.Times];\n  const operator = operators[randNumInRange(0, 1)];\n  const x = randNumInRange(1, 10);\n  const y = randNumInRange(1, 10);\n  return new BinaryOperation(x, y, operator);\n}\n\ninterface AnsweredOperation extends Readonly<{\n  operation: Operation,\n  answer: number,\n}> { }\n\nexport default function App() {\n  const cls = useStyles();\n  const [operation, setOperation] = useState(randomOperation());\n  const [answers, setAnswers] = useState([\n    // { operation: randomOperation(), answer: randNumInRange(0, 10) },\n    // { operation: randomOperation(), answer: randNumInRange(0, 10) },\n    // { operation: randomOperation(), answer: randNumInRange(0, 10) },\n    // { operation: randomOperation(), answer: randNumInRange(0, 10) },\n    // { operation: randomOperation(), answer: randNumInRange(0, 10) },\n    // { operation: randomOperation(), answer: randNumInRange(0, 10) },\n    // { operation: randomOperation(), answer: randNumInRange(0, 10) },\n    // { operation: randomOperation(), answer: randNumInRange(0, 10) },\n    // { operation: randomOperation(), answer: randNumInRange(0, 10) },\n    // { operation: randomOperation(), answer: randNumInRange(0, 10) },\n    // { operation: randomOperation(), answer: randNumInRange(0, 10) },\n    // { operation: randomOperation(), answer: randNumInRange(0, 10) },\n    // { operation: randomOperation(), answer: randNumInRange(0, 10) },\n    // { operation: randomOperation(), answer: randNumInRange(0, 10) },\n  ] as AnsweredOperation[]);\n  const [correctCount, setCorrectCount] = useState(0);\n  const giveAnswer = (answer: number) => {\n    const answeredOp = { operation, answer };\n    setAnswers([...answers, answeredOp]);\n    if (operation.output() === answer) {\n      setOperation(randomOperation());\n      setCorrectCount(correctCount + 1);\n    }\n  }\n  return (\n    <div className={cls.root}>\n      <CssBaseline />\n      <AppBar className={cls.appBar} position=\"relative\">\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\">\n            Complémentaires\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Container>\n        <Grid container>\n          <Grid container item justify=\"center\">\n            <Grid item>\n              <Paper className={cls.question}>\n                <Grid container>\n                  <Grid item>\n                    <Grid container justify=\"flex-end\" wrap=\"nowrap\">\n                      <Grid item>\n                          <Expression operation={operation} />\n                      </Grid>\n                      <Grid item>\n                        <Answer giveAnswer={giveAnswer} />\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                  <Grid item>\n                    <Grid container className={cls.stats} alignContent=\"center\">\n                      <Grid item>\n                        <Typography variant=\"body1\">\n                          Total: {correctCount}/{answers.length}\n                        </Typography>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Paper>\n            </Grid>\n          </Grid>\n\n          <Grid container item justify=\"center\" spacing={2}>\n            {answers.map((answer, i) => (\n              <Grid item key={i} className={cls.previousAnswer}>\n                <Paper style={{padding: 8}}>\n                  <Expression operation={answer.operation} answer={answer.answer} />\n                </Paper>\n              </Grid>\n            ))}\n          </Grid>\n\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}