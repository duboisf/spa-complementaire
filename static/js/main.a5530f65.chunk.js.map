{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","grid","flexGrow","paper","height","width","toolbar","mixins","x","Math","round","random","y","Boolean","window","location","hostname","match","ReactDOM","render","classes","recognition","webkitSpeechRecognition","useState","equation","answer","setAnswer","result","console","log","parseInt","useEffect","lang","continuous","interimResults","onresult","event","results","resultIndex","transcript","start","stop","position","variant","className","container","justify","item","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"45BAQA,IAAMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,GAEZC,MAAO,CACLC,OAAQ,IACRC,MAAO,KAETC,QAAQ,EAAD,GACFN,EAAMO,OAAOD,aAIdE,EAAIC,KAAKC,MAAsB,EAAhBD,KAAKE,UACpBC,EAAIH,KAAKC,MAAsB,EAAhBD,KAAKE,UCVNE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBFkBD,WACb,IAAMC,EAAUtB,IACVuB,EAAiC,IAAKP,OAAeQ,wBAF/B,EAGIC,mBAAS,GAAD,OAAIf,EAAJ,cAAWI,IAHvB,mBAGrBY,EAHqB,aAIAD,mBAAS,KAJT,mBAIrBE,EAJqB,KAIbC,EAJa,KAKxBC,EAAS,QAmBb,OAlBAC,QAAQC,IAAR,kBAAuBJ,IACvBG,QAAQC,IAAIC,SAASL,IACrBG,QAAQC,IAAIrB,EAAII,GACZkB,SAASL,KAAYjB,EAAII,IAC3Be,EAAS,QAEXI,qBAAU,WAQR,OAPAV,EAAYW,KAAO,QACnBX,EAAYY,YAAa,EACzBZ,EAAYa,gBAAiB,EAC7Bb,EAAYc,SAAW,SAACC,GACtBV,EAAUU,EAAMC,QAAQD,EAAME,aAAa,GAAGC,aAEhDlB,EAAYmB,QACL,WACLnB,EAAYoB,UAEb,IAED,oCACE,kBAAC,IAAD,CAAQC,SAAS,SACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYC,QAAQ,MAApB,wBAKJ,yBAAKC,UAAWxB,EAAQd,UACxB,kBAAC,IAAD,CAAMuC,WAAS,EAACD,UAAWxB,EAAQnB,KAAM6C,QAAQ,UAC/C,kBAAC,IAAD,CAAMC,MAAI,GACR,kBAAC,IAAD,CAAYJ,QAAQ,SACjBnB,EADH,MACgBC,EADhB,KAC0BE,QEvDpB,MAASqB,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a5530f65.chunk.js","sourcesContent":["import AppBar from '@material-ui/core/AppBar/AppBar';\nimport Grid from '@material-ui/core/Grid/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Toolbar from '@material-ui/core/Toolbar/Toolbar';\nimport Typography from '@material-ui/core/Typography/Typography';\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\n\nconst useStyles = makeStyles(theme => ({\n  grid: {\n    flexGrow: 1,\n  },\n  paper: {\n    height: 140,\n    width: 100,\n  },\n  toolbar: {\n    ...theme.mixins.toolbar,\n  }\n}));\n\nconst x = Math.round(Math.random() * 5);\nconst y = Math.round(Math.random() * 5);\n\nexport default function App() {\n  const classes = useStyles();\n  const recognition: SpeechRecognition = new (window as any).webkitSpeechRecognition();\n  const [equation, setEquation] = useState(`${x} + ${y}`);\n  const [answer, setAnswer] = useState(\"\");\n  let result = \"nope!\";\n  console.log(`answer: ${answer}`)\n  console.log(parseInt(answer));\n  console.log(x + y);\n  if (parseInt(answer) === x + y) {\n    result = \"yes!\";\n  }\n  useEffect(() => {\n    recognition.lang = 'fr-CA';\n    recognition.continuous = true;\n    recognition.interimResults = false;\n    recognition.onresult = (event) => {\n      setAnswer(event.results[event.resultIndex][0].transcript);\n    }\n    recognition.start();\n    return () => {\n      recognition.stop();\n    }\n  }, [])\n  return (\n    <>\n      <AppBar position=\"fixed\">\n        <Toolbar>\n          <Typography variant=\"h6\">\n            Compl√©mentaires\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <div className={classes.toolbar} />\n      <Grid container className={classes.grid} justify=\"center\" >\n        <Grid item>\n          <Typography variant=\"body1\">\n            {equation} = {answer}? {result}\n          </Typography>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}